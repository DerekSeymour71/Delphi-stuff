unit uCircle;
//twitch demo of code  https://www.twitch.tv/videos/543918630

interface

uses
   classes,
   sysutils,
   types,
   FMX.Types,
   Fmx.Objects,
   FMX.Controls,
   UiTypes,
   FMX.Graphics;

type

   ITextCircle = interface
    Function GetText : TText;
    Property Text : TText read getText;
   end;

   TTextCircle = class(TCircle,ITextCircle)
   private
     fText : TText;  //this is going be created by the class, rather being injected.
   protected
      function GetText : TText;
      procedure CreateText;
      Procedure DestroyText;
      Procedure SetTextDimensions;
   public
     Constructor Create(aOwner : TComponent); override;
     Destructor Destroy;Override;
   end;


   ITextIterator = interface
     Function getNext : Boolean;
     function getLetter : String;
     property Letter : String read getLetter;
   end;

  TTextIterator = class(TInterfacedObject,ITextIterator)
  private
    fIndex : integer;
    fText : String;
    fLetter : String;
  protected
    Function getNext : Boolean;
    Function getLetter : String;
  public
    Constructor Create(Const Text : String);
  end;

   ITextTyper = interface;

   TRequestTextDestination = reference to procedure(Sender : ITextTyper;
                                                    var Destination : TText);

  ITextTyper = interface
    function GetRequestTextDestination : TRequestTextDestination;
    Procedure SetRequestTextDestination(Const RequestTextDestination : TRequestTextDestination);
    procedure WriteLetter(Const Destination : TText);

    Procedure Start;
    Procedure Stop;
    property TextDestination : TRequestTextDestination read GetRequestTextDestination  write SetRequestTextDestination;

  end;




  TTextTyper = class(TInterfacedObject,ITextTyper)
  private
    FTextIterator : ITextIterator;
    FTimer : TTimer;
    fDestination : TText;
    FRequestTextDestination : TRequestTextDestination;
  protected
     function GetRequestTextDestination : TRequestTextDestination;
     Procedure SetRequestTextDestination(Const RequestTextDestination : TRequestTextDestination);
     Procedure OnTimer(Sender : TObject);
     procedure WriteLetter(Const Destination : TText);

  public
    Procedure Start;
    Procedure Stop;
    Constructor Create(Const TextIterator : ITextIterator);
    Destructor Destroy; Override;

  end;

   TTextCursor = class(TText)


   private
     fTimer : TTimer;
     fCursor : String;
     fCursorIdx : integer; //position of cursor;
   protected
     Procedure DisplayCursor(Sender : TObject);
   public
     constructor Create(aOwner : TComponent);Override;
     destructor destroy;Override;
   end;



implementation

  constructor TTextCursor.Create(aOwner : TComponent);
  begin
    inherited create(aOwner);
    fTimer := TTimer.create(aOwner);
    fTimer.Interval := 250;
    fTimer.OnTimer := DisplayCursor;
    fCursor := '';
    TextSettings.VertAlign := TTextAlign.Leading;
    TextSettings.HorzAlign := TTextAlign.Leading;

  end;


  Procedure TTextCursor.DisplayCursor(Sender : TObject);
  begin
    if fCursor = '' then
    begin
      fCursor := '|';
      text := Text + fCursor;
      fCursorIdx := pos('|',text); //record position of it
    end
    else
    begin
      fCursor := '';
      Text := copy(Text,0,fCursorIdx-1) + copy(Text,fCursorIdx+1,Length(Text)-1);
    end;

  end;

  Destructor TTextCursor.destroy;
  begin
    fTimer.free;
    inherited destroy;
  end;

 function TTextTyper.GetRequestTextDestination : TRequestTextDestination;
 begin
   result := FRequestTextDestination;
 end;

 Procedure TTextTyper.SetRequestTextDestination(Const RequestTextDestination : TRequestTextDestination);
 begin
   FRequestTextDestination := RequestTextDestination;
 end;

Procedure TTextTyper.Start;
begin
  fTimer.Enabled := true;
end;

Procedure TTextTyper.Stop;
begin
  fTimer.Enabled := False;
end;

 Procedure TTextTyper.OnTimer(Sender : TObject);
 begin
   if assigned(FRequestTextDestination) then
   begin
     FRequestTextDestination(Self,fDestination);
     if assigned(fDestination) then
     begin
       WriteLetter(FDestination);
     end;
   end;

 end;

 procedure TTextTyper.WriteLetter(Const Destination : TText);
 begin
   if FTextIterator.getNext then
     Destination.text := Destination.Text + FTextIterator.Letter;
 end;

 Constructor TTextTyper.Create(Const TextIterator : ITextIterator);
 begin
   inherited create;
   Assert(assigned(TextIterator),'Iter is empty');
  // Assert(Assigned(Destination),'No text to write to');
   FTextIterator :=  TextIterator;
  // fDestination := Destination;
   fTimer := TTimer.create(nil);
   fTimer.Interval := 250;
   FTimer.OnTimer := Self.OnTimer;
 end;

 Destructor TTextTyper.Destroy;
 begin
   fTimer.free;
   inherited Destroy;
 end;

constructor TTextIterator.Create(Const Text : String);
begin
  inherited create;
  fText := Text;
  fIndex := 0;
  fLetter := '';
end;

Function TTextIterator.getLetter : String;
begin
  result := fLetter;
end;

Function TTextIterator.getNext : Boolean;
begin
  inc(FIndex);
  result := (length(fText) > 0) And (fIndex <= length(FText));
  if result then fLetter := fText[FIndex];

end;

Procedure TTextCircle.SetTextDimensions;
begin
  fText.Align := TAlignLayout.Center;
  fText.Size.Width := width;
  fText.Size.Height := height;
end;

procedure TTextCircle.CreateText;
begin
  fText := TText.create(Self);
  addObject(FText);
  SetTextDimensions;
  fText.TextSettings.font.Family :=  'Berlin Sans FB';
  fText.TextSettings.font.size := 30;
//  fText.Size.PlatformDefault = False
  fText.Text := 'Some text';
  fText.TextSettings.FontColor := TalphaColorRec.Chartreuse;
end;

Procedure TTextCircle.DestroyText;
begin
  //do I need to remove it.... and destroy
 // fText.Free;
end;


function TTextCircle.GetText : TText;
begin
  result := fText;
end;

 Constructor TTextCircle.Create(aOwner : TComponent);
 begin
    inherited;
    Fill.Color := TAlphaColorRec.Null;
    Size.Width := 250;
    Size.Height := 250;
//  Size.PlatformDefault := False
    Stroke.Color := TAlphaColorRec.White;
    createText;
 end;

 destructor TTextCircle.Destroy;
 begin
   //destroyText;
   inherited;
 end;

end.

Usage

procedure TForm8.Button2Click(Sender: TObject);
var
  TextCursor : TTextCursor;

begin


  TextCursor := TTextCursor.create(Self);
  TextCursor.TextSettings.FontColor := TalphaColorRec.white;
  TextCursor.Width := 300;
  TextCursor.Height := 300;
  addObject(TextCursor);


  FTextIter := TTextIterator.create('#1 Some text');
  FTextTyper := TTextTyper.create(FTextIter);
  FTextTyper.TextDestination := procedure(Sender : ITextTyper; var Destination : TText)
  begin
    Destination :=  TextCursor;
  end;
  FTextTyper.Start;


end;



