unit uCircle;

interface

uses
   classes,
   sysutils,
   types,
   FMX.Types,
   Fmx.Objects,
   FMX.Controls,
   UiTypes;

type

   ITextCircle = interface
      Function GetText : TText;
      Property Text : TText read getText;
   end;

   TTextCircle = class(TCircle,ITextCircle)
   private
     fText : TText;  //this is going be created by the class, rather being injected.
   protected
      function GetText : TText;
      procedure CreateText;
      Procedure DestroyText;
      Procedure SetTextDimensions;
   public
     Constructor Create(aOwner : TComponent); override;
     Destructor Destroy;Override;
   end;


   //display text like a type-writer
   ITypeWriter = interface
     Procedure Start;
     Procedure Stop;
     Procedure WriteText;
     Procedure SetInterval(Const Count : integer);
     Function getInterval : Integer;

     Procedure setText(Const value : String);
     function getText : String;
     Property Interval : Integer read getInterval write setInterval;

   end;


   TTypeWriter = class(TText,ITypeWriter)
   private
     fTimer : TTimer; //loop of when to write letter
     fIndex : integer; //current index of letter
     fCount : integer; //count of letters
     fText : String;   //the text;
   protected
     function getNext : Boolean;
     Procedure createTimer;
      Procedure WriteText;
     Procedure SetInterval(Const Count : integer);
     Function getInterval : Integer;

     Procedure setText(Const value : String);
     function getText : String;

     procedure OnTimer(Sender : TObject); //loop of timer;
   public
     Procedure Start;
     Procedure Stop;
     constructor create(aOwner : TComponent);override;
   end;



implementation

constructor TTypeWriter.create(aOwner : TComponent);
begin
  inherited;

  fIndex := -1;
end;

 procedure TTypeWriter.OnTimer(Sender : TObject); //loop of timer;
 begin
   WriteText;
 end;

function TTypeWriter.getNext : boolean;
begin
  result := fIndex < fCount-1;
  inc(fIndex);
end;

Procedure TTypeWriter.WriteText;
begin
  if getNext then Text := Text + fText[fIndex];
end;

Procedure TTypeWriter.createTimer;
begin
   fTimer := TTimer.create(self); //loop of when to write letter
   fTimer.OnTimer := OnTimer; //event of timer
end;

Procedure TTypeWriter.Start;
begin
  createTimer;
end;

Procedure TTypeWriter.Stop;
begin
  freeandnil(fTimer);
end;

Procedure TTypeWriter.setText(Const value : String);
begin
  fText := Text;
  fCount := length(Value);
end;

function TTypeWriter.getText : String;
begin
  result := fText;
end;

Procedure TTypeWriter.SetInterval(Const Count : integer);
begin
  fTimer.Interval := Count;
end;

Function TTypeWriter.getInterval : Integer;
begin
  result := fTimer.Interval;
end;



Procedure TTextCircle.SetTextDimensions;
begin
  fText.Align := TAlignLayout.Center;
  fText.Size.Width := width;
  fText.Size.Height := height;
end;

procedure TTextCircle.CreateText;
begin
  fText := TText.create(Self);
  addObject(FText);
  SetTextDimensions;
  fText.TextSettings.font.Family :=  'Berlin Sans FB';
  fText.TextSettings.font.size := 30;
//  fText.Size.PlatformDefault = False
  fText.Text := 'Some text';
  fText.TextSettings.FontColor := TalphaColorRec.Chartreuse;

end;

Procedure TTextCircle.DestroyText;
begin
  //do I need to remove it.... and destroy
 // fText.Free;
end;


function TTextCircle.GetText : TText;
begin
  result := fText;
end;

 Constructor TTextCircle.Create(aOwner : TComponent);
 begin
    inherited;

    Fill.Color := TAlphaColorRec.Null;
    Size.Width := 250;
    Size.Height := 250;
//  Size.PlatformDefault := False
    Stroke.Color := TAlphaColorRec.White;
    createText;
 end;

 destructor TTextCircle.Destroy;
 begin
   //destroyText;
   inherited;
 end;

end.
