unit prefixarray;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Layouts,
  FMX.ListBox, FMX.Controls.Presentation, FMX.StdCtrls, system.math, FMX.Edit,
  FMX.EditBox, FMX.SpinBox;



type



  TIntegerArray = array of integer;

  TForm7 = class(TForm)
    ListBox1: TListBox;
    Button1: TButton;
    SpinBox1: TSpinBox;
    SpinBox2: TSpinBox;
    SpinBox3: TSpinBox;
    SpinBox4: TSpinBox;
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }

  end;

var
  Form7: TForm7;





implementation


{$R *.fmx}



procedure TForm7.Button1Click(Sender: TObject);
const
  A : array[0..5] of integer = (0, 0, 0, 0, 0,0);           // 0    //all zero
  B : array[0..5] of integer = (-5, 5, -5, 4,3,4);          // 125   //mix of negative and positive
  C : array[0..5] of integer = (-5, -5, -5, -5,-5,-5);      // -125  //all negative
  D : array[0..2] of integer = (-5, -5, -5);                // -125  //negative triplet
  E : array[0..2] of integer = (-5, -5, 5);                 // 125   //1 positive, and 2 negatives
  F : array[0..2] of integer = (-5, 5, 5);                  // -125  //2 positives 1 negative
  G : array[0..3] of integer = (-5, 5, 5, 5);               // 125   //1 negative, 3 positve
  H : array[0..3] of integer = (5,4,-3,-2);                 // 30   //mix
  I : array[0..2] of integer = (-10, -2, -4);               // -80   //small triplet
  J : array[0..3] of integer = (-5, -5, 5,5);               // 125   //two negative, two positives
  K : array[0..9] of integer = (-5, -5,-4,10,-2,-3,-5,-6,-11,-12);               // 1320   //1 positive, rest negative
  L : array[0..9] of integer = (2, 4,4,10,2,3,5,6,11,12);               // 1320   //all positive
  M : array[0..4] of integer = (-5, -6, -4, -7, -10);              //-120




  function Max(A,B : integer) : integer;
  begin
    result := A;
    if B > result then
       result := B;
  end;

  function Min(A,B : integer) : integer;
  begin
    result := A;
    if B < result then result := B;
  end;


  function MinThree(X,Y,Z : integer) : integer;
  begin
    result := min(min(X,Y),Z);
  end;


  function MaxThree(X,Y,Z : integer) : integer;
  begin
    result := Max(max(X,Y),Z);
  end;

                  //-5,-7,-11
  //set biggest element to a smaller element
  procedure SetMinThree(var X,Y,Z : integer; Value : integer);
  var
    Max : integer;
  begin
    Max := MaxThree(X,Y,Z);
    if   (X = Max) then
    begin
      if (value < X) then X:= Value;
    end
    else if (Y=Max)then
    begin
      if (value < Y) then Y:= Value;
    end
    else if (Z=max)then
    begin
     if (value < Z) then Z:= Value;
    end;
  end;


  procedure SetMaxThree(var X,Y,Z : integer; Value : integer);
  var
    Min : integer;
  begin
    Min := MinThree(X,Y,Z);
    if   (X = min) then
    begin
      if (value > X) then X:= Value;
    end
    else if (Y=Min)then
    begin
      if (value > Y) then Y:= Value;
    end
    else if (Z=Min)then
    begin
     if (value > Z) then Z:= Value;
    end;
  end;


  function MaxProduct(Const A :  array of integer) : integer;
  var
    X,Y,Z : integer; //max three
    P,Q,R : integer; //min three;
    MinMaxA : integer;
    MinMaxB : integer;
    i : integer;
    size : integer;
    SumA,SumB : integer;
  begin
    X := A[0];
    Y := A[1];
    Z := A[2];
    P := X;
    Q := Y;
    R := Z;
    Size := length(A);
    MinMaxA := Min(P,Q);
    MinMaxB := Min(Q,R);
    for i := 3 to size-1 do
    begin
      setMaxThree(X,Y,Z,A[I]);
      setMinThree(P,Q,R,A[i]);
      //max of min three
      MinMaxA := min(P,Q);
      MinMaxB := min(Q,R);
    end;

    SumA := X*Y*Z;
    SumB := maxThree(X,Y,Z) * MinMaxA * MinMaxB;
    result := Max(SumA,SumB);

  end;



var
  x,y,z, value : integer;



begin
  ListBox1.items.clear;
  Listbox1.items.add(MaxProduct(A).ToString);
  Listbox1.items.add(MaxProduct(B).ToString);
  Listbox1.items.add(MaxProduct(C).ToString);
  Listbox1.items.add(MaxProduct(D).ToString);
  Listbox1.items.add(MaxProduct(E).ToString);
  Listbox1.items.add(MaxProduct(F).ToString);
  Listbox1.items.add(MaxProduct(G).ToString);
  Listbox1.items.add(MaxProduct(H).ToString);
  Listbox1.items.add(MaxProduct(I).ToString);
  Listbox1.items.add(MaxProduct(J).ToString);
  Listbox1.items.add(MaxProduct(K).ToString);
  Listbox1.items.add(MaxProduct(L).ToString);
  Listbox1.items.add(MaxProduct(M).ToString);




end;



end.



