//the guts of my solution to codility circle intersections.
//i've included a quick sort algorithm as well,
//100% correct, I believe.

visual representation of initial problem
https://ibb.co/5kyPkfz

visual of circle intersections, of left edges
https://ibb.co/68x7KTy

//here is why it works....it's not intuitive but this hopefully explains it better

(* (1,5,2,1,4,0)   
   

        0    1     2    3    4    5                   this is a sorted left, and right index of circles.
      -4,1  -1,4  0,4  0,5  2,6  5,8                  


      
      0  1,2,3     -- what is between 0?
      1  2,3,4,
      2  3,4
      3  4,5
      4  5
      5

      running count =  11

 
 another example.
 (1,1,1,1,1)  
 
     0      1     2     3     4

     -1,1   0,2   1,3   2,4   3,5
 


    0   1,2
    1   2,3
    2   3,4
    3   4
    4
 *)



function partition(var Arr : circles;  left,right : integer) : integer;
var
   pivot,tmp : longint;
begin
   pivot := arr[(left + right) div 2];

        while (left <= right) do
        begin
            while (arr[left] < pivot) do
            begin
               inc(left);
            end;

            while (arr[right] > pivot) do
            begin
                dec(right);
            end;

            if (left <= right) then
            begin
              tmp := arr[left];

              arr[left] := arr[right];    
              arr[right] := tmp;   

              inc(left);
              dec(right);
            end;
       end;

   result := left;
end;


procedure quicksort(var Arr : circles; left,right :integer);
var
  index : integer;
begin
    index := partition(arr, left, right);
    if (left < index - 1) then
    begin
        quicksort(arr, left, index - 1);
    end;

    if (index < right) then
    begin
        quicksort(arr, index, right);
    end;
end;

 
 
procedure TForm8.Button1Click(Sender: TObject);
const A : Array[0..n-1] of integer = (1,5,2,1,4,0);
//const A : Array[0..n-1] of integer = (1,1,1,3,4,5);
//const A : Array[0..n-1] of integer = (1,1,1,1,1,1);  //9           sum 6
//const A : Array[0..n-1] of integer = (2,2,2,2,2,2);   //14       sum 12
//const A : Array[0..n-1] of integer =  (3,3,3,3,3,3);   //15
//const A : Array[0..n-1] of integer =  (4,4,4,4,4,4);   //15
//const A : Array[0..n-1] of integer =  (5,5,5,5,5,5);   //15
//const A : Array[0..n-1] of integer =  (50,50,50,50,50,50);   //15

   // (-4,    -1,    0,    0,   2,      5)
  //  (1,     4,     4,    5,   6,      8)




var
  left,right : integer;
  leftEdges : Circles;
  RightEdges : Circles;
  counter : integer;
  previousCircles: integer;
  leftP : integer;
  rightP : integer;
  result :  integer;
  r : integer;
  i : integer;

begin
   for i := 0 to N-1 do
   begin
     r := A[i];
     left := i - r;
     leftEdges[i] := left;

     right := i + r;
     rightEdges[i] := right;
   end;



  quicksort(leftEdges, 0, N-1);
  quicksort(rightEdges, 0, N-1);

   counter := 0;
   previousCircles := 0;
   leftP := 0;

    for rightP := 0 to N-1 do
    begin
        while ((leftP < N) and (leftEdges[leftP] <= rightEdges[rightP])) do
        begin
           inc(LeftP);

           inc(previousCircles);
        end ;



         dec(PreviousCircles);
         inc(counter,PreviousCircles);

        if (counter > 10000000) then //this should be N
        begin
            result := -1;
        end;

    end;
   result := counter;

   ListBox1.items.add(Result.ToString);
end;



//here's my workings 


                      L      R
A  A[0] = 1         -1,     1       Yellow
B  A[1] = 5         -4,     6       black
C  A[2] = 2          0,     4       green
D  A[3] = 1          2,     4       blue
E  A[4] = 4          0,     8       red
F  A[5] = 0          5,     5       pink


radius sorted L,R
     L                     R
0   -4    black            1    yellow
1   -1    yellow           4    green
2    0    green            4    blue
3    0    red              5    pink
4    2    blue             6    black
5    5    pink             8    red


 Brute force solution : 68% correct, fails on an overflow(i.e. addition of huge numbers) and speed...i.e. runs to slow on big data.
 * you can write to stdout for debugging purposes, e.g. *)
(* WriteLn('this is a debug message');                  *)

function solution(A: array of longint; N: longint): longint; 
    (* write your code in Free Pascal 3.0 *)
var
  i,j : longint;
  LeftA,rightA,
  LeftB,rightB : longint;
  result : Longint;


begin
  result := 0;

  //count forward
  //0 1 2 3 4 5
  //1 2 4 2 5 6
  For i := 0 to N-1 do
  begin
    leftA  :=  i - A[i];
    rightA :=  i + A[i];

    for J := i+1 to N-1 do
    begin
      leftB  :=  j - A[j];
      rightB :=  J + A[j];
     // AddLetters(i,j);

      if ((LeftB >= LeftA) and (LeftB <= rightA)) or
         ((RightA >=LeftB) and (rightA<= rightB)) then
      begin
        inc(result);
      end;


    end;


  end;

  solution := result;

end;

Here's another idea which may work...you build a tree of the left indexes, and as you go totalling the collisions of left. Then you take a each circle
and place it on top of the previous left indexes. Maybe, I'll draw a a diagram, but kind of like what can this circle "see" from its radius?


You'd have something like this for left indexes
[0]
 |
[0]----[1]----[2]---[3]---[4]
        |      |
       [1]    [2]   


immediately, you notice that at 0 there is 2 collisions. at 1 and 2, 2 collisions.

then you super-impose the right indexes on top of the tree. 

an idea. for example if you had 0-5

well, first of all, you deduct 1, as 0 it part of the query, then you count them i.e 7 for 0--5

I'm not sure of the validity of this idea.




